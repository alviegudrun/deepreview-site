/**
 * DeepReview User Guide JavaScript
 * Handles navigation, content loading, search, and theme switching
 */

class UserGuideApp {
  constructor() {
    this.currentLang = this.getLanguageFromURL() || 'en';
    this.currentSection = this.getSectionFromURL() || 'scenarios';
    this.guideData = null;
    this.sections = [];
    this.searchIndex = [];
    
    this.init();
  }

  async init() {
    this.bindEvents();
    await this.loadGuideData();
    this.renderNavigation();
    this.showSection(this.currentSection);
    this.updateLanguageToggle();
    this.updateLastUpdated();
  }

  getLanguageFromURL() {
    const params = new URLSearchParams(window.location.search);
    return params.get('lang') || 'en';
  }

  getSectionFromURL() {
    const hash = window.location.hash.replace('#', '');
    return hash || 'scenarios';
  }

  updateURL(section) {
    const url = new URL(window.location);
    url.hash = section;
    url.searchParams.set('lang', this.currentLang);
    window.history.replaceState({}, '', url);
  }

  async loadGuideData() {
    try {
      // Áî±‰∫éÊµèËßàÂô®ÂÆâÂÖ®ÈôêÂà∂ÔºåÊàë‰ª¨ÈúÄË¶ÅÂ∞Ü markdown ÂÜÖÂÆπÂµåÂÖ•Âà∞ JavaScript ‰∏≠
      // ÊàñËÄÖ‰ΩøÁî®ÊúçÂä°Âô®Á´ØÁÇπÊù•Êèê‰æõÂÜÖÂÆπ
      
      // ‰∏¥Êó∂Ëß£ÂÜ≥ÊñπÊ°àÔºöÊòæÁ§∫ÈùôÊÄÅÂÜÖÂÆπ
      this.guideData = {
        en: this.getStaticEnContent(),
        zh: this.getStaticZhContent()
      };
      
    } catch (error) {
      console.error('Failed to load guide data:', error);
      this.showError();
    }
  }

  parseMarkdown(content) {
    const sections = {};
    const lines = content.split('\n');
    let currentSection = null;
    let currentContent = [];
    
    for (const line of lines) {
      if (line.startsWith('## üéØ') || line.startsWith('## üîó') || line.startsWith('## ‚öôÔ∏è') || 
          line.startsWith('## üöÄ') || line.startsWith('## üîí') || line.startsWith('## üíé') || 
          line.startsWith('## üìû')) {
        
        if (currentSection && currentContent.length > 0) {
          sections[currentSection] = {
            title: currentContent[0].replace(/^## /, ''),
            content: currentContent.join('\n')
          };
        }
        
        if (line.includes('Â∫îÁî®Âú∫ÊôØ') || line.includes('Application Scenarios')) {
          currentSection = 'scenarios';
        } else if (line.includes('AI‰æõÂ∫îÂïÜ') || line.includes('AI Provider')) {
          currentSection = 'providers';
        } else if (line.includes('Âü∫Á°ÄÂäüËÉΩ') || line.includes('Basic Functions')) {
          currentSection = 'basic';
        } else if (line.includes('È´òÁ∫ßÂäüËÉΩ') || line.includes('Advanced Features')) {
          currentSection = 'advanced';
        } else if (line.includes('ÈöêÁßÅ‰∏éÂÆâÂÖ®') || line.includes('Privacy & Security')) {
          currentSection = 'privacy';
        } else if (line.includes('ËÆ¢ÈòÖÊîøÁ≠ñ') || line.includes('Subscription Policy')) {
          currentSection = 'subscription';
        } else if (line.includes('ÊîØÊåÅ‰∏éÂèçÈ¶à') || line.includes('Support & Feedback')) {
          currentSection = 'support';
        }
        
        currentContent = [line];
      } else {
        if (currentSection) {
          currentContent.push(line);
        }
      }
    }
    
    if (currentSection && currentContent.length > 0) {
      sections[currentSection] = {
        title: currentContent[0].replace(/^## /, ''),
        content: currentContent.join('\n')
      };
    }
    
    return sections;
  }

  renderNavigation() {
    const nav = document.getElementById('guideNav');
    const data = this.guideData[this.currentLang];
    
    if (!data) return;
    
    const navSections = [
      { key: 'scenarios', icon: 'üéØ', title: this.currentLang === 'zh' ? 'Â∫îÁî®Âú∫ÊôØ' : 'Application Scenarios' },
      { key: 'providers', icon: 'üîó', title: this.currentLang === 'zh' ? 'AI‰æõÂ∫îÂïÜÈÖçÁΩÆ' : 'AI Provider Setup' },
      { key: 'basic', icon: '‚öôÔ∏è', title: this.currentLang === 'zh' ? 'Âü∫Á°ÄÂäüËÉΩ' : 'Basic Functions' },
      { key: 'advanced', icon: 'üöÄ', title: this.currentLang === 'zh' ? 'È´òÁ∫ßÂäüËÉΩ' : 'Advanced Features' },
      { key: 'privacy', icon: 'üîí', title: this.currentLang === 'zh' ? 'ÈöêÁßÅ‰∏éÂÆâÂÖ®' : 'Privacy & Security' },
      { key: 'subscription', icon: 'üíé', title: this.currentLang === 'zh' ? 'ËÆ¢ÈòÖÊîøÁ≠ñ' : 'Subscription Policy' },
      { key: 'support', icon: 'üìû', title: this.currentLang === 'zh' ? 'ÊîØÊåÅ‰∏éÂèçÈ¶à' : 'Support & Feedback' }
    ];
    
    nav.innerHTML = navSections.map(section => `
      <div class="nav-section">
        <div class="nav-section-title" data-section="${section.key}">
          <span class="section-icon">${section.icon}</span>
          <span class="section-title">${section.title}</span>
        </div>
      </div>
    `).join('');
    
    this.sections = navSections;
  }

  showSection(sectionKey) {
    // Update navigation
    document.querySelectorAll('.nav-section-title').forEach(el => {
      el.classList.remove('active');
    });
    
    const activeNav = document.querySelector(`[data-section="${sectionKey}"]`);
    if (activeNav) {
      activeNav.classList.add('active');
    }
    
    // Update content
    const data = this.guideData[this.currentLang];
    if (!data || !data[sectionKey]) {
      this.showError();
      return;
    }
    
    const content = data[sectionKey];
    const article = document.getElementById('guideArticle');
    article.innerHTML = this.markdownToHtml(content.content);
    
    // Update breadcrumb
    const section = this.sections.find(s => s.key === sectionKey);
    const breadcrumb = document.getElementById('breadcrumb');
    breadcrumb.innerHTML = `
      <span class="breadcrumb-item">User Guide</span>
      <span class="breadcrumb-separator">/</span>
      <span class="breadcrumb-item current">${section ? section.title : sectionKey}</span>
    `;
    
    // Update pagination
    this.updatePagination(sectionKey);
    
    // Update URL
    this.currentSection = sectionKey;
    this.updateURL(sectionKey);
    
    // Scroll to top
    document.querySelector('.guide-content').scrollTop = 0;
  }

  updatePagination(currentKey) {
    const currentIndex = this.sections.findIndex(s => s.key === currentKey);
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    if (currentIndex > 0) {
      const prevSection = this.sections[currentIndex - 1];
      prevBtn.disabled = false;
      prevBtn.innerHTML = `<span>‚Üê</span> ${prevSection.title}`;
      prevBtn.onclick = () => this.showSection(prevSection.key);
    } else {
      prevBtn.disabled = true;
      prevBtn.innerHTML = '<span>‚Üê</span> Previous';
      prevBtn.onclick = null;
    }
    
    if (currentIndex < this.sections.length - 1) {
      const nextSection = this.sections[currentIndex + 1];
      nextBtn.disabled = false;
      nextBtn.innerHTML = `${nextSection.title} <span>‚Üí</span>`;
      nextBtn.onclick = () => this.showSection(nextSection.key);
    } else {
      nextBtn.disabled = true;
      nextBtn.innerHTML = 'Next <span>‚Üí</span>';
      nextBtn.onclick = null;
    }
  }

  markdownToHtml(markdown) {
    let html = markdown;
    
      // Headers (order matters - start with most specific)
    html = html.replace(/^#### (.*$)/gm, '<h4>$1</h4>');
    html = html.replace(/^### (.*$)/gm, '<h3>$1</h3>');
    html = html.replace(/^## (.*$)/gm, '<h2>$1</h2>');
    html = html.replace(/^# (.*$)/gm, '<h1>$1</h1>');
      
      // Bold and italic
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
      
      // Links
    html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');
      
    // Code blocks (before inline code)
    html = html.replace(/```([^`]*?)```/gs, '<pre><code>$1</code></pre>');
    html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
    
    // Tables (process before other paragraph splitting)
    html = html.replace(/(\|[^|\n]+\|[^\n]*\n\|[-|:\s]+\|[^\n]*\n(\|[^|\n]+\|[^\n]*\n?)*)/g, (match) => {
      const rows = match.trim().split('\n').filter(row => row.trim() && row.includes('|'));
        if (rows.length < 2) return match;
        
        let table = '<table><thead><tr>';
        const headers = rows[0].split('|').slice(1, -1);
        headers.forEach(header => {
          table += `<th>${header.trim()}</th>`;
        });
        table += '</tr></thead><tbody>';
        
      // Skip separator row (index 1)
        for (let i = 2; i < rows.length; i++) {
          const cells = rows[i].split('|').slice(1, -1);
          table += '<tr>';
          cells.forEach(cell => {
            table += `<td>${cell.trim()}</td>`;
          });
          table += '</tr>';
        }
        
        table += '</tbody></table>';
        return table;
    });
    
    // Process content by sections to handle lists properly
    const sections = html.split(/\n\n+/);
    const processedSections = sections.map(section => {
      section = section.trim();
      if (!section) return '';
      
      // Skip already processed HTML elements
      if (section.startsWith('<')) return section;
      
      // Handle lists
      if (section.includes('\n- ')) {
        const lines = section.split('\n');
        let listHtml = '';
        let inList = false;
        
        for (const line of lines) {
          if (line.trim().startsWith('- ')) {
            if (!inList) {
              listHtml += '<ul>';
              inList = true;
            }
            listHtml += `<li>${line.trim().substring(2)}</li>`;
          } else if (inList) {
            listHtml += '</ul>';
            inList = false;
            if (line.trim()) {
              listHtml += `<p>${line.trim()}</p>`;
            }
          } else if (line.trim()) {
            listHtml += `<p>${line.trim()}</p>`;
          }
        }
        
        if (inList) {
          listHtml += '</ul>';
        }
        
        return listHtml;
      }
      
      // Handle numbered lists with sub-items
      if (/^\d+\./.test(section)) {
        const lines = section.split('\n');
        let result = '';
        let inList = false;
        let listContent = [];
        
        for (const line of lines) {
          const trimmed = line.trim();
          
          if (/^\d+\./.test(trimmed)) {
            if (!inList) {
              result += '<ol>';
              inList = true;
            }
            // Remove the number and dot, keep only the content
            const content = trimmed.replace(/^\d+\.\s*/, '');
            result += `<li>${content}`;
            listContent = []; // Reset sub-content for this list item
          } else if (trimmed.startsWith('- ') && inList) {
            // Handle sub-items within numbered list
            if (listContent.length === 0) {
              result += '<ul>';
            }
            result += `<li>${trimmed.substring(2)}</li>`;
            listContent.push(trimmed);
          } else if (trimmed && inList) {
            // Handle other content within list item
            if (listContent.length > 0) {
              result += '</ul>';
              listContent = [];
            }
            result += `<div>${trimmed}</div>`;
          } else if (trimmed) {
            // Handle content outside of list
            if (inList) {
              if (listContent.length > 0) {
                result += '</ul>';
              }
              result += '</li></ol>';
              inList = false;
              listContent = [];
            }
            result += `<p>${trimmed}</p>`;
          }
        }
        
        // Close any open tags
        if (inList) {
          if (listContent.length > 0) {
            result += '</ul>';
          }
          result += '</li></ol>';
        }
        
        return result;
      }
      
      // Regular paragraph
      return `<p>${section}</p>`;
    });
    
    html = processedSections.join('\n');
      
      // Clean up
    html = html.replace(/<p><\/p>/g, '');
    html = html.replace(/\n+/g, '\n');
    html = html.replace(/>\s+</g, '><');
    
    return html;
  }



  updateLanguageToggle() {
    const langText = document.getElementById('langText');
    const langIcon = document.getElementById('langIcon');
    
    if (this.currentLang === 'en') {
      langText.textContent = '‰∏≠Êñá';
      langIcon.textContent = 'üåê';
    } else {
      langText.textContent = 'English';
      langIcon.textContent = 'üåê';
    }
  }

  switchLanguage() {
    this.currentLang = this.currentLang === 'en' ? 'zh' : 'en';
    this.updateLanguageToggle();
    this.renderNavigation();
    this.showSection(this.currentSection);
    this.updateURL(this.currentSection);
  }

  toggleTheme() {
    document.body.classList.toggle('dark-theme');
    const themeIcon = document.getElementById('themeIcon');
    const isDark = document.body.classList.contains('dark-theme');
    themeIcon.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
    
    // Save theme preference
    localStorage.setItem('user-guide-theme', isDark ? 'dark' : 'light');
  }

  loadThemePreference() {
    const savedTheme = localStorage.getItem('user-guide-theme');
    if (savedTheme === 'dark') {
      document.body.classList.add('dark-theme');
      document.getElementById('themeIcon').textContent = '‚òÄÔ∏è';
    }
  }

  updateLastUpdated() {
    const lastUpdated = document.getElementById('lastUpdated');
    const date = new Date().toLocaleDateString(this.currentLang === 'zh' ? 'zh-CN' : 'en-US');
    lastUpdated.textContent = date;
  }

  showError() {
    const article = document.getElementById('guideArticle');
    article.innerHTML = `
      <div class="error-state">
        <h2>‚ö†Ô∏è Loading Error</h2>
        <p>Unable to load the user guide content. Please try refreshing the page.</p>
        <button class="btn btn-primary" onclick="window.location.reload()">Refresh Page</button>
      </div>
    `;
  }

  getStaticEnContent() {
    return {
      scenarios: {
        title: 'üéØ Application Scenarios',
        content: `## üéØ Application Scenarios

DeepReview is a highly flexible AI-powered review tool that supports both predefined and custom rules. 
- **Error Detection**: Syntax errors, logic errors, potential runtime errors
- **Security Vulnerability Detection**: SQL injection, XSS attacks, authentication issues, etc.
- **Performance Optimization**: Resource leaks, inefficient algorithms, improper data structure usage
- **Code Style**: Naming conventions, comment completeness, code organization structure
- **Technical Documentation**: API docs, user manuals, technical specifications
- **Consistency Checks**: Terminology usage, format uniformity, content completeness
- **Readability Enhancement**: Language clarity, logical structure, example code
- **Code Review**: Automated Pull Request reviews
- **Standardization**: Unified team coding standards

### üíª Review Workflow

Experience the full functionality of DeepReview through these steps:

#### Step 1: Configure AI Provider
First, configure your AI provider settings and select the appropriate model and API.

<div class="operation-step">
  <img src="./assets/images/step1-settings.png" alt="Configure AI Provider" class="step-image" />
  <p class="step-description">Select your AI provider (such as Deepseek) in the settings interface, configure model parameters and API key. The system will automatically test the connection to ensure proper configuration.</p>
</div>

#### Step 2: Import Files for Review
Import the code files that need to be reviewed into the system.

<div class="operation-step">
  <img src="./assets/images/step2-import-files.png" alt="Import Files" class="step-image" />
  <p class="step-description">Click "Import Files" to import Python files. The system supports multiple programming languages and will automatically identify file types and display code content.</p>
</div>

#### Step 3: Select Review Rules
Choose appropriate predefined rule sets based on your code type.

<div class="operation-step">
  <img src="./assets/images/step3-select-rules.png" alt="Select Rules" class="step-image" />
  <p class="step-description">Click "Import Rules" to select code review rules. The system provides various predefined rule sets including code style, security checks, performance optimization, etc.</p>
</div>

#### Step 4: Start AI Review
Launch the AI review process and wait for analysis completion.

<div class="operation-step">
  <img src="./assets/images/step4-start-review.png" alt="Start Review" class="step-image" />
  <p class="step-description">Click "Start Review" to begin the review process. The system displays a progress bar as AI analyzes each selected rule and generates a detailed review report.</p>
</div>

#### Step 5: View Review Results
Get detailed AI review reports and improvement suggestions.

<div class="operation-step">
  <img src="./assets/images/step5-view-results.png" alt="View Results" class="step-image" />
  <p class="step-description">After review completion, the right panel displays detailed findings and improvement suggestions. Each issue includes specific code locations, problem descriptions, and solutions.</p>
</div>

#### Step 6: Handle Review Suggestions
Make appropriate modifications and optimizations to your code based on AI suggestions.

<div class="operation-step">
  <img src="./assets/images/step6-handle-suggestions.png" alt="Handle Suggestions" class="step-image" />
  <p class="step-description">You can accept, reject, or mark suggestions as pending. The system supports exporting review reports for convenient team collaboration and code improvement tracking.</p>
</div>

`
      },
      providers: {
        title: 'üîó AI Provider Setup',
        content: `## üîó AI Provider Setup

DeepReview supports multiple AI providers. Choose the one that best fits your needs and budget.

### üåü Supported AI Providers

| Provider | Models | Context Length | Official Website |
|----------|---------|----------------|------------------|
| **OpenAI** | GPT-4o, GPT-4o-mini, GPT-4 Turbo, GPT-3.5 Turbo | 4K - 128K tokens | [openai.com](https://openai.com) |
| **Anthropic Claude** | Claude-3.5 Sonnet, Claude-3 Opus, Claude-3 Haiku | 200K tokens | [anthropic.com](https://anthropic.com) |
| **Google Gemini** | Gemini-1.5 Pro, Gemini-1.5 Flash, Gemini Pro | 1M - 2M tokens | [ai.google.dev](https://ai.google.dev) |
| **DeepSeek** | DeepSeek-Chat, DeepSeek-Coder | 32K tokens | [deepseek.com](https://deepseek.com) |
| **Moonshot (Kimi)** | Moonshot-v1-8k, Moonshot-v1-32k, Moonshot-v1-128k | 8K - 200K tokens | [moonshot.cn](https://moonshot.cn) |
| **Alibaba Qwen** | Qwen-Turbo, Qwen-Plus, Qwen-Max | 6K - 30K tokens | [bailian.console.aliyun.com](https://bailian.console.aliyun.com) |
| **Baidu ERNIE** | ERNIE-4.0, ERNIE-3.5, ERNIE-Bot-turbo | 5K - 20K tokens | [cloud.baidu.com](https://cloud.baidu.com) |
| **Tencent Hunyuan** | Hunyuan-Pro, Hunyuan-Standard, Hunyuan-Lite | 32K tokens | [cloud.tencent.com](https://cloud.tencent.com) |
| **ByteDance Doubao** | Doubao-pro-32k, Doubao-lite-4k | 4K - 32K tokens | [volcengine.com](https://volcengine.com) |
| **xAI Grok** | Grok-2, Grok-2-mini | 131K tokens | [x.ai](https://x.ai) |

### üîß Configuration Steps

1. Open DeepReview Settings and navigate to the "General" tab
2. Select your AI Provider from the dropdown list of supported providers
3. Enter your API Key and select the specific model you want to use
4. Configure API URL, Context Window, and Output Length settings
5. Click "Test API Connection" to verify your settings
6. Save your configuration - settings are stored locally and encrypted

### üîê Security & Privacy

- **Local Storage**: All API keys are stored locally on your device
- **Encryption**: API keys are encrypted before storage
- **No Server Transit**: Your keys never pass through our servers
- **Direct Communication**: DeepReview connects directly to your chosen AI provider

### üè† Local Model Deployment

You can also run AI models locally using **Ollama** and connect them to DeepReview.

#### Using Ollama

**Ollama** is the easiest way to run local AI models. It supports popular models like Llama, Mistral, CodeLlama, and Qwen.

**Installation & Setup:**

1. Download and install Ollama from [ollama.ai](https://ollama.ai)
2. Start Ollama service: \`ollama serve\`
3. Download a model: \`ollama pull codellama:13b\`
4. In DeepReview, select "OpenAI Compatible" as AI Provider
5. Set API URL to local url (eg. \`http://localhost:11434/v1/chat/completions\`) 
6. Use any dummy key like \`local-key\` for API Key
7. Enter your model name (e.g., \`codellama:13b\`)
8. Test the connection to verify setup

**Benefits of Local Models:**

- **Privacy**: All data stays on your device
- **Cost**: No API usage fees after initial setup
- **Offline**: Works without internet connection
- **Customization**: Choose from various specialized models

### üõ†Ô∏è Common API Issues & Solutions

#### üîó Connection Issues

1. Check your internet connection stability
2. Verify the API URL is correct
3. Test with manual API call to verify connectivity
4. Check firewall settings for API request blocking
5. Consider VPN issues in certain regions

#### üîê Authentication Issues

1. Double-check your API key is correct
2. Ensure your account is active
3. Verify your account has sufficient credits/balance
4. Check API key permissions
5. Try generating a new API key

#### ‚ö° Rate Limiting & Quotas

1. Review your plan's rate limits
2. Consider upgrading to higher tier
3. Space out API requests
4. Combine multiple requests when possible

#### üìÑ Response Format Issues

1. Reduce the context window setting
2. Break large files into smaller chunks
3. Limit the amount of text per request
4. Use models with larger context limits
5. Remove unnecessary content before processing

#### üöÄ Performance Issues

1. Verify provider's service status
2. Set lower max_tokens limit
3. Switch to quicker models like GPT-4o-mini
4. Use concise and clear rules

### üí° Provider Selection Tips

- **For Code Review**: OpenAI GPT-4, Claude-3.5 Sonnet, or DeepSeek-Coder
- **For Large Files**: Google Gemini (2M context) or Claude (200K context)
- **For Cost Efficiency**: OpenAI GPT-4o-mini, Moonshot, or local models
- **For Chinese Content**: Qwen, ERNIE, Hunyuan, or Doubao
- **For Latest Features**: GPT-4o, Claude-3.5 Sonnet, or Gemini-1.5 Pro
- **For Privacy**: Local models via Ollama, vLLM, or LM Studio`
      },
      basic: {
        title: '‚öôÔ∏è Basic Settings Configuration',
        content: `## ‚öôÔ∏è Basic Settings Configuration

### üåü Configuration Options

| Setting | Function | Default/Options | Notes |
|---------|----------|----------------|--------|
| **Language** | Set user interface language | English, ‰∏≠Êñá | Interface language and AI Response Language |
| **API Provider** | Select AI service provider | OpenAI, Claude, DeepSeek, Gemini, Qwen, Grok, OpenAI Compatible... | Each has different models, pricing, capabilities |
| **AI Model** | Choose specific model | Auto-updated based on provider | Larger models = better quality + higher cost |
| **API URL** | Custom API endpoint | Auto-filled by provider | Required only for OpenAI Compatible |
| **API Key** | Authentication credential | User-provided | Encrypted locally, never shared with servers |
| **Output Length** | AI response token limit | 4000 tokens (100-8000 recommended) | Too small = truncated; too large = rejected |
| **Context Window** | Input token limit per request | 32768 tokens | Auto-splits when exceeded; rarely needs adjustment |
| **Connection Test** | Verify API configuration | Test button | Validates settings before use |

### üìä Analysis & Export Settings

| Setting | Function | Options | Use Cases |
|---------|----------|---------|-----------|
| **Detail Level** | Control analysis depth | Simple, Balanced, Detailed | Simple = fast; Detailed = thorough + slower |
| **Export Layout** | Report organization | By Rule, By File | By Rule = rule-focused; By File = file-focused |
| **Filter Passed** | Show only problems | Enable/Disable | Enable = issues only; Disable = all results |
| **Collapse Function** | HTML report navigation | Enable/Disable | Enable for large reports with many sections |
| **Reset Settings** | Restore defaults | One-click reset | Cannot be undone; preserves API keys |

### üîß Configuration Tips

- **For Code Review**: Choose models with strong programming capabilities (GPT-4, Claude-3.5-Sonnet, DeepSeek-Coder)
- **For Large Files**: Use providers with large context windows (Gemini 2M, Claude 200K, Kimi 128K)
- **For Cost Efficiency**: Consider GPT-4o-mini, DeepSeek, or local models via OpenAI Compatible
- **For Chinese Content**: Qwen, ERNIE, Hunyuan, or Doubao provide better Chinese understanding
- **For Privacy**: Use local models via Ollama with OpenAI Compatible setting`
      },
              advanced: {
          title: 'üöÄ Advanced Features Configuration',
          content: `## üöÄ Advanced Features Configuration

### ‚ö° Core Advanced Features

| Feature | Function | Options/Settings | Pro Required | Use Cases |
|---------|----------|------------------|--------------|-----------|
| **Review Mode** | Result management & filtering | Accept/Pending/Reject status | No | Team reviews, QA workflows, progress tracking |
| **Parallel Tasks** | Concurrent API requests | 1-10 tasks (Free: max 1) | Yes (>1) | Multi-file processing, faster reviews |
| **Multi-File Analysis** | Analyze files as cohesive unit | Enable/Disable | No | Cross-file dependencies, architecture validation |
| **AI Repair Suggestions** | Generate fix buttons in reports | Enable/Disable + sub-options | Yes | Quick fixes, learning from AI suggestions |

### üîß Detailed Configuration

| Setting | Description | Recommended Values | Important Notes |
|---------|-------------|-------------------|----------------|
| **Parallel Tasks** | Number of simultaneous API calls | 3-8 for most users | Higher values may trigger rate limits |
| **Include File Content** | Full context for AI repair | Enable for accuracy | Increases token usage significantly |
| **Require Detailed Plan** | AI explains before suggesting | Enable for safety | Reduces risk of inappropriate changes |
| **Context Window Monitoring** | Track merged file size | Auto-calculated | Exceeding limits reduces effectiveness |

### üéØ Feature Benefits & Limitations

| Feature | Benefits | Limitations | Best Practices |
|---------|----------|-------------|----------------|
| **Review Mode** | Systematic tracking, team collaboration | Local storage only | Use for structured review processes |
| **Parallel Tasks** | 3-5x faster processing, better resource use | Rate limits, higher costs | Start with 3-5, adjust based on provider |
| **Multi-File Analysis** | Cross-file consistency, architecture insights | Context window limits, slower processing | Group related files only (component + test + types) |
| **AI Repair** | Quick fixes, learning tool | HTML reports only, separate API calls | Use selectively for complex issues |

### üí° Optimization Tips

**Performance Optimization**:

- Start with 3 parallel tasks, increase gradually
- Monitor provider rate limits and adjust accordingly
- Use multi-file analysis for related components only

**Cost Management**:

- Higher parallel tasks = faster completion but higher short-term costs
- Balance speed vs. cost based on project needs

**Quality Assurance**:

- Enable "Require Detailed Plan" for AI suggestions
- Use Review Mode for systematic code review processes
- Test advanced settings with small files first`
      },
      privacy: {
        title: 'üîí Privacy & Security',
        content: `## üîí Privacy & Security

### Data Privacy

- All processing happens locally or through your chosen AI provider
- No data stored on our servers
- API keys encrypted locally

### Security Features

- Secure API key storage
- Local processing options
- No data transmission to third parties`
      },
      subscription: {
        title: 'üíé Subscription Policy',
        content: `## üíé Subscription Policy

### üéÅ New User Experience

**7-Day Pro Trial**: All new users automatically get full Pro access for 7 days

- No credit card required to start
- Full access to all Pro features
- Seamless transition to Free tier if not upgraded

### üí∞ Annual Subscription Benefit

**Pay for 10 months, get 12 months**: Annual subscribers save 2 months compared to monthly billing

### üìä Feature Comparison

| Feature | Free Version | Pro Version |
|---------|-------------|-------------|
| File Analysis | ‚úÖ Multi files | ‚úÖ Multi files |
| All AI Providers | ‚úÖ All supported | ‚úÖ All supported |
| Predefined Rules | ‚úÖ All rule sets | ‚úÖ All rule sets |
| Multi-File Analysis | ‚úÖ Supported | ‚úÖ Supported |
| Basic Export | ‚úÖ HTML | ‚úÖ HTML |
| Custom Rules | ‚ùå Not available | ‚úÖ Create & import |
| Review Mode | ‚ùå Not available | ‚úÖ Accept/Pending/Reject |
| Parallel Tasks | ‚ùå 1 task only | ‚úÖ Up to 10 tasks |
| AI Repair Suggestions | ‚ùå Not available | ‚úÖ In exported reports |
| Advanced Export | ‚ùå Basic formats only | ‚úÖ Enhanced HTML with AI fixes |

### üè∑Ô∏è Pricing

- **Annual Plan**: $59.9/year (equivalent to ~$5/month)
- **Monthly Plan**: $5.9/month

### üîÑ Subscription Management

- Cancel anytime, continue using until period ends
- Automatic renewal (can be disabled)`
      },
      support: {
        title: 'üìû Support & Feedback',
        content: `## üìû Support & Feedback

### Getting Help

- Email: support@deepreview.cloud

### Feedback

We value your feedback! Help us improve DeepReview by sharing your experience and suggestions.`
      }
    };
  }

  getStaticZhContent() {
    return {
      scenarios: {
        title: 'üéØ ‰ª£Á†ÅÊ£ÄËßÜ',
        content: `## üéØ ‰ª£Á†ÅÊ£ÄËßÜ

DeepReview ÊòØ‰∏Ä‰∏™È´òÂ∫¶ÁÅµÊ¥ªÁöÑ AI È©±Âä®ÁöÑÂÆ°Êü•Â∑•ÂÖ∑ÔºåÊîØÊåÅÈ¢ÑÂÆö‰πâÂíåËá™ÂÆö‰πâËßÑÂàô„ÄÇ
- **ÈîôËØØÊ£ÄÊµã**ÔºöËØ≠Ê≥ïÈîôËØØ„ÄÅÈÄªËæëÈîôËØØ„ÄÅÊΩúÂú®ËøêË°åÊó∂ÈîôËØØ
- **ÂÆâÂÖ®ÊºèÊ¥ûÊ£ÄÊµã**ÔºöSQLÊ≥®ÂÖ•„ÄÅXSSÊîªÂáª„ÄÅËÆ§ËØÅÈóÆÈ¢òÁ≠â
- **ÊÄßËÉΩ‰ºòÂåñ**ÔºöËµÑÊ∫êÊ≥ÑÊºè„ÄÅ‰ΩéÊïàÁÆóÊ≥ï„ÄÅ‰∏çÂΩìÁöÑÊï∞ÊçÆÁªìÊûÑ‰ΩøÁî®
- **‰ª£Á†ÅÈ£éÊ†º**ÔºöÂëΩÂêçËßÑËåÉ„ÄÅÊ≥®ÈáäÂÆåÊï¥ÊÄß„ÄÅ‰ª£Á†ÅÁªÑÁªáÁªìÊûÑ
- **ÊäÄÊúØÊñáÊ°£**ÔºöAPIÊñáÊ°£„ÄÅÁî®Êà∑ÊâãÂÜå„ÄÅÊäÄÊúØËßÑËåÉ
- **‰∏ÄËá¥ÊÄßÊ£ÄÊü•**ÔºöÊúØËØ≠‰ΩøÁî®„ÄÅÊ†ºÂºèÁªü‰∏Ä„ÄÅÂÜÖÂÆπÂÆåÊï¥ÊÄß
- **ÂèØËØªÊÄßÊèêÂçá**ÔºöËØ≠Ë®ÄÊ∏ÖÊô∞Â∫¶„ÄÅÈÄªËæëÁªìÊûÑ„ÄÅÁ§∫‰æã‰ª£Á†Å
- **‰ª£Á†ÅËØÑÂÆ°**ÔºöPull Request Ëá™Âä®ÂÆ°Êü•
- **Ê†áÂáÜÂåñ**ÔºöÂõ¢ÈòüÁºñÁ†ÅËßÑËåÉÁªü‰∏Ä

### üíª ÂÆ°Êü•Â∑•‰ΩúÊµÅÁ®ã

ÈÄöËøá‰ª•‰∏ãÊ≠•È™§‰ΩìÈ™å DeepReview ÁöÑÂÆåÊï¥ÂäüËÉΩÔºö

#### Á¨¨1Ê≠•ÔºöÈÖçÁΩÆ AI ‰æõÂ∫îÂïÜ
È¶ñÂÖàÈúÄË¶ÅÈÖçÁΩÆÊÇ®ÁöÑ AI ‰æõÂ∫îÂïÜËÆæÁΩÆÔºåÈÄâÊã©ÂêàÈÄÇÁöÑÊ®°ÂûãÂíå API„ÄÇ

<div class="operation-step">
  <img src="./assets/images/step1-settings.png" alt="ÈÖçÁΩÆ AI ‰æõÂ∫îÂïÜ" class="step-image" />
  <p class="step-description">Âú®ËÆæÁΩÆÁïåÈù¢‰∏≠ÈÄâÊã© AI ‰æõÂ∫îÂïÜÔºàÂ¶Ç DeepseekÔºâÔºåÈÖçÁΩÆÊ®°ÂûãÂèÇÊï∞Âíå API ÂØÜÈí•„ÄÇÁ≥ªÁªü‰ºöËá™Âä®ÊµãËØïËøûÊé•Á°Æ‰øùÈÖçÁΩÆÊ≠£Á°Æ„ÄÇ</p>
</div>

#### Á¨¨2Ê≠•ÔºöÂØºÂÖ•Ë¶ÅÂÆ°Êü•ÁöÑÊñá‰ª∂
Â∞ÜÈúÄË¶ÅÂÆ°Êü•ÁöÑ‰ª£Á†ÅÊñá‰ª∂ÂØºÂÖ•Âà∞Á≥ªÁªü‰∏≠„ÄÇ

<div class="operation-step">
  <img src="./assets/images/step2-import-files.png" alt="ÂØºÂÖ•Êñá‰ª∂" class="step-image" />
  <p class="step-description">ÁÇπÂáª"Import Files"ÊåâÈíÆÂØºÂÖ•PythonÊñá‰ª∂„ÄÇÁ≥ªÁªüÊîØÊåÅÂ§öÁßçÁºñÁ®ãËØ≠Ë®ÄÔºå‰ºöËá™Âä®ËØÜÂà´Êñá‰ª∂Á±ªÂûãÂπ∂ÊòæÁ§∫‰ª£Á†ÅÂÜÖÂÆπ„ÄÇ</p>
</div>

#### Á¨¨3Ê≠•ÔºöÈÄâÊã©ÂÆ°Êü•ËßÑÂàô
Ê†πÊçÆ‰ª£Á†ÅÁ±ªÂûãÈÄâÊã©ÂêàÈÄÇÁöÑÈ¢ÑÂÆö‰πâËßÑÂàôÈõÜ„ÄÇ

<div class="operation-step">
  <img src="./assets/images/step3-select-rules.png" alt="ÈÄâÊã©ËßÑÂàô" class="step-image" />
  <p class="step-description">ÁÇπÂáª"Import Rules"ÈÄâÊã©‰ª£Á†ÅÂÆ°Êü•ËßÑÂàô„ÄÇÁ≥ªÁªüÊèê‰æõÂ§öÁßçÈ¢ÑÂÆö‰πâËßÑÂàôÈõÜÔºåÂåÖÊã¨‰ª£Á†ÅÈ£éÊ†º„ÄÅÂÆâÂÖ®Ê£ÄÊü•„ÄÅÊÄßËÉΩ‰ºòÂåñÁ≠â„ÄÇ</p>
</div>

#### Á¨¨4Ê≠•ÔºöÂºÄÂßãAIÂÆ°Êü•
ÂêØÂä® AI ÂÆ°Êü•ËøõÁ®ãÔºåÁ≠âÂæÖÂàÜÊûêÂÆåÊàê„ÄÇ

<div class="operation-step">
  <img src="./assets/images/step4-start-review.png" alt="ÂºÄÂßãÂÆ°Êü•" class="step-image" />
  <p class="step-description">ÁÇπÂáª"Start Review"ÊåâÈíÆÂºÄÂßãÂÆ°Êü•„ÄÇÁ≥ªÁªü‰ºöÊòæÁ§∫ËøõÂ∫¶Êù°ÔºåAI‰ºöÈÄêÊù°ÂàÜÊûêÈÄâ‰∏≠ÁöÑËßÑÂàôÂπ∂ÁîüÊàêËØ¶ÁªÜÁöÑÂÆ°Êü•Êä•Âëä„ÄÇ</p>
</div>

#### Á¨¨5Ê≠•ÔºöÊü•ÁúãÂÆ°Êü•ÁªìÊûú
Ëé∑ÂæóËØ¶ÁªÜÁöÑ AI ÂÆ°Êü•Êä•ÂëäÂíåÊîπËøõÂª∫ËÆÆ„ÄÇ

<div class="operation-step">
  <img src="./assets/images/step5-view-results.png" alt="Êü•ÁúãÁªìÊûú" class="step-image" />
  <p class="step-description">ÂÆ°Êü•ÂÆåÊàêÂêéÔºåÂè≥‰æßÈù¢ÊùøÊòæÁ§∫ËØ¶ÁªÜÁöÑÂèëÁé∞ÈóÆÈ¢òÂíåÊîπËøõÂª∫ËÆÆ„ÄÇÊØè‰∏™ÈóÆÈ¢òÈÉΩÂåÖÂê´ÂÖ∑‰ΩìÁöÑ‰ª£Á†Å‰ΩçÁΩÆ„ÄÅÈóÆÈ¢òÊèèËø∞ÂíåËß£ÂÜ≥ÊñπÊ°à„ÄÇ</p>
</div>

#### Á¨¨6Ê≠•ÔºöÂ§ÑÁêÜÂÆ°Êü•Âª∫ËÆÆ
Ê†πÊçÆ AI Âª∫ËÆÆÂØπ‰ª£Á†ÅËøõË°åÁõ∏Â∫îÁöÑ‰øÆÊîπÂíå‰ºòÂåñ„ÄÇ

<div class="operation-step">
  <img src="./assets/images/step6-handle-suggestions.png" alt="Â§ÑÁêÜÂª∫ËÆÆ" class="step-image" />
  <p class="step-description">ÂèØ‰ª•Êé•Âèó„ÄÅÊãíÁªùÊàñÊ†áËÆ∞‰∏∫ÂæÖÂ§ÑÁêÜÁä∂ÊÄÅ„ÄÇÁ≥ªÁªüÊîØÊåÅÂØºÂá∫ÂÆ°Êü•Êä•ÂëäÔºåÊñπ‰æøÂõ¢ÈòüÂçè‰ΩúÂíå‰ª£Á†ÅÊîπËøõË∑üË∏™„ÄÇ</p>
</div>

`
      },
      providers: {
        title: 'üîó AI ‰æõÂ∫îÂïÜÈÖçÁΩÆ',
        content: `## üîó AI ‰æõÂ∫îÂïÜÈÖçÁΩÆ

DeepReview ÊîØÊåÅÂ§ö‰∏™ AI ‰æõÂ∫îÂïÜÔºåÊÇ®ÂèØ‰ª•ÈÄâÊã©ÊúÄÈÄÇÂêàÊÇ®ÈúÄÊ±ÇÂíåÈ¢ÑÁÆóÁöÑ‰æõÂ∫îÂïÜ„ÄÇ

### üåü ÊîØÊåÅÁöÑ AI ‰æõÂ∫îÂïÜ

| ‰æõÂ∫îÂïÜ | Ê®°Âûã | ‰∏ä‰∏ãÊñáÈïøÂ∫¶ | ÂÆòÊñπÁΩëÁ´ô |
|--------|------|------------|----------|
| **OpenAI** | GPT-4o, GPT-4o-mini, GPT-4 Turbo, GPT-3.5 Turbo | 4K - 128K tokens | [openai.com](https://openai.com) |
| **Anthropic Claude** | Claude-3.5 Sonnet, Claude-3 Opus, Claude-3 Haiku | 200K tokens | [anthropic.com](https://anthropic.com) |
| **Google Gemini** | Gemini-1.5 Pro, Gemini-1.5 Flash, Gemini Pro | 1M - 2M tokens | [ai.google.dev](https://ai.google.dev) |
| **DeepSeek** | DeepSeek-Chat, DeepSeek-Coder | 32K tokens | [deepseek.com](https://deepseek.com) |
| **Êúà‰πãÊöóÈù¢ (Kimi)** | Moonshot-v1-8k, Moonshot-v1-32k, Moonshot-v1-128k | 8K - 200K tokens | [moonshot.cn](https://moonshot.cn) |
| **ÈòøÈáå‰∫ëÈÄö‰πâÂçÉÈóÆ** | Qwen-Turbo, Qwen-Plus, Qwen-Max | 6K - 30K tokens | [bailian.console.aliyun.com](https://bailian.console.aliyun.com) |
| **ÁôæÂ∫¶ÊñáÂøÉ‰∏ÄË®Ä** | ERNIE-4.0, ERNIE-3.5, ERNIE-Bot-turbo | 5K - 20K tokens | [cloud.baidu.com](https://cloud.baidu.com) |
| **ËÖæËÆØÊ∑∑ÂÖÉ** | Hunyuan-Pro, Hunyuan-Standard, Hunyuan-Lite | 32K tokens | [cloud.tencent.com](https://cloud.tencent.com) |
| **Â≠óËäÇË∑≥Âä®Ë±ÜÂåÖ** | Doubao-pro-32k, Doubao-lite-4k | 4K - 32K tokens | [volcengine.com](https://volcengine.com) |
| **xAI Grok** | Grok-2, Grok-2-mini | 131K tokens | [x.ai](https://x.ai) |

### üîß ÈÖçÁΩÆÊ≠•È™§

1. ÊâìÂºÄ DeepReview ËÆæÁΩÆÂπ∂ÂØºËà™Âà∞"ÈÄöÁî®"Ê†áÁ≠æÈ°µ
2. ‰ªéÊîØÊåÅÁöÑ‰æõÂ∫îÂïÜ‰∏ãÊãâÂàóË°®‰∏≠ÈÄâÊã© AI ‰æõÂ∫îÂïÜ
3. ËæìÂÖ•ÊÇ®ÁöÑ API ÂØÜÈí•Âπ∂ÈÄâÊã©Ë¶Å‰ΩøÁî®ÁöÑÂÖ∑‰ΩìÊ®°Âûã
4. ÈÖçÁΩÆ API URL„ÄÅ‰∏ä‰∏ãÊñáÁ™óÂè£ÂíåËæìÂá∫ÈïøÂ∫¶ËÆæÁΩÆ
5. ÁÇπÂáª"ÊµãËØï API ËøûÊé•"È™åËØÅËÆæÁΩÆ
6. ‰øùÂ≠òÈÖçÁΩÆ - ËÆæÁΩÆÂú®Êú¨Âú∞Â≠òÂÇ®Âπ∂Âä†ÂØÜ

### üîê ÂÆâÂÖ®‰∏éÈöêÁßÅ

- **Êú¨Âú∞Â≠òÂÇ®**ÔºöÊâÄÊúâ API ÂØÜÈí•ÈÉΩÂ≠òÂÇ®Âú®ÊÇ®ÁöÑËÆæÂ§á‰∏ä
- **Âä†ÂØÜÂ≠òÂÇ®**ÔºöAPI ÂØÜÈí•Âú®Â≠òÂÇ®Ââç‰ºöË¢´Âä†ÂØÜ
- **Êó†ÊúçÂä°Âô®‰º†Ëæì**ÔºöÊÇ®ÁöÑÂØÜÈí•Ê∞∏Ëøú‰∏ç‰ºöÈÄöËøáÊàë‰ª¨ÁöÑÊúçÂä°Âô®
- **Áõ¥Êé•ÈÄö‰ø°**ÔºöDeepReview Áõ¥Êé•ËøûÊé•Âà∞ÊÇ®ÈÄâÊã©ÁöÑ AI ‰æõÂ∫îÂïÜ

### üè† Êú¨Âú∞Ê®°ÂûãÈÉ®ÁΩ≤

ÊÇ®ÂèØ‰ª•‰ΩøÁî® **Ollama** Âú®Êú¨Âú∞ËøêË°å AI Ê®°ÂûãÔºåÂπ∂ËøûÊé•Âà∞ DeepReview„ÄÇ

#### ‰ΩøÁî® Ollama

**Ollama** ÊòØËøêË°åÊú¨Âú∞ AI Ê®°ÂûãÊúÄÁÆÄÂçïÁöÑÊñπÂºèÔºåÊîØÊåÅ Llama„ÄÅMistral„ÄÅCodeLlama Âíå Qwen Á≠âÁÉ≠Èó®Ê®°Âûã„ÄÇ

**ÂÆâË£Ö‰∏éËÆæÁΩÆÔºö**

1. ‰ªé [ollama.ai](https://ollama.ai) ‰∏ãËΩΩÂπ∂ÂÆâË£Ö Ollama
2. ÂêØÂä® Ollama ÊúçÂä°Ôºö\`ollama serve\`
3. ‰∏ãËΩΩÊ®°ÂûãÔºö\`ollama pull codellama:13b\`
4. Âú® DeepReview ‰∏≠ÈÄâÊã©"OpenAI Compatible"‰Ωú‰∏∫ AI ‰æõÂ∫îÂïÜ
5. ËÆæÁΩÆ API URL ‰∏∫Êú¨Âú∞URLÔºå‰æãÂ¶Ç \`http://localhost:11434/v1/chat/completions\`
6. ‰ΩøÁî®‰ªªÊÑèËôöÊãüÂØÜÈí•Â¶Ç \`local-key\` ‰Ωú‰∏∫ API ÂØÜÈí•
7. ËæìÂÖ•Ê®°ÂûãÂêçÁß∞ÔºàÂ¶Ç \`codellama:13b\`Ôºâ
8. ÊµãËØïËøûÊé•‰ª•È™åËØÅËÆæÁΩÆ

**Êú¨Âú∞Ê®°ÂûãÁöÑ‰ºòÂäøÔºö**

- **ÈöêÁßÅ‰øùÊä§**ÔºöÊâÄÊúâÊï∞ÊçÆ‰øùÁïôÂú®ÊÇ®ÁöÑËÆæÂ§á‰∏ä
- **ÊàêÊú¨ËäÇÁ∫¶**ÔºöÂàùÂßãËÆæÁΩÆÂêéÊó† API ‰ΩøÁî®Ë¥πÁî®
- **Á¶ªÁ∫øÂ∑•‰Ωú**ÔºöÊó†ÈúÄ‰∫íËÅîÁΩëËøûÊé•Âç≥ÂèØ‰ΩøÁî®
- **Ê®°ÂûãÈÄâÊã©**ÔºöÂèØÈÄâÊã©ÂêÑÁßç‰∏ì‰∏öÊ®°Âûã

### üõ†Ô∏è API Â∏∏ËßÅÈóÆÈ¢ò‰∏éËß£ÂÜ≥ÊñπÊ°à

#### üîó ËøûÊé•ÈóÆÈ¢ò

1. Á°Æ‰øùÁΩëÁªúËøûÊé•Á®≥ÂÆö
2. Á°ÆËÆ§Á´ØÁÇπ URL Ê≠£Á°Æ
3. Â∞ùËØïÊâãÂä® API Ë∞ÉÁî®È™åËØÅËøûÈÄöÊÄß
4. Ê£ÄÊü•Èò≤ÁÅ´Â¢ôËÆæÁΩÆ
5. ËÄÉËôëÊüê‰∫õÂú∞Âå∫ÂèØËÉΩÂ±èËîΩÁâπÂÆö‰æõÂ∫îÂïÜ

#### üîê Ë∫´‰ªΩÈ™åËØÅÈóÆÈ¢ò

1. ‰ªîÁªÜÊ£ÄÊü• API ÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ
2. Á°Æ‰øùË¥¶Êà∑Â§Ñ‰∫éÊ¥ªË∑ÉÁä∂ÊÄÅ
3. È™åËØÅË¥¶Êà∑ÊúâË∂≥Â§üÁöÑÈ¢ùÂ∫¶/‰ΩôÈ¢ù
4. Á°Æ‰øù API ÂØÜÈí•ÂÖ∑ÊúâÊâÄÈúÄÊùÉÈôê
5. Â∞ùËØïÁîüÊàêÊñ∞ÁöÑ API ÂØÜÈí•

#### ‚ö° ÈÄüÁéáÈôêÂà∂ÂíåÈÖçÈ¢ù

1. Êü•ÁúãÊÇ®Â•óÈ§êÁöÑÈÄüÁéáÈôêÂà∂
2. ËÄÉËôëÂçáÁ∫ßÂà∞Êõ¥È´òÁ∫ßÂà´
3. Èó¥Èöî API ËØ∑Ê±Ç
4. Â∞ΩÂèØËÉΩÂêàÂπ∂Â§ö‰∏™ËØ∑Ê±Ç

#### üìÑ ÂìçÂ∫îÊ†ºÂºèÈóÆÈ¢ò

1. ÂáèÂ∞ë‰∏ä‰∏ãÊñáÁ™óÂè£ËÆæÁΩÆ
2. Â∞ÜÂ§ßÊñá‰ª∂ÂàÜËß£‰∏∫ËæÉÂ∞èÁöÑÂùó
3. ÈôêÂà∂ÊØèÊ¨°ËØ∑Ê±ÇÁöÑÊñáÊú¨Èáè
4. ‰ΩøÁî®‰∏ä‰∏ãÊñáÈôêÂà∂Êõ¥Â§ßÁöÑÊ®°Âûã
5. Â§ÑÁêÜÂâçÂà†Èô§‰∏çÂøÖË¶ÅÁöÑÂÜÖÂÆπ

#### üöÄ ÊÄßËÉΩÈóÆÈ¢ò

1. È™åËØÅ‰æõÂ∫îÂïÜÁöÑÊúçÂä°Áä∂ÊÄÅ
2. ËÆæÁΩÆËæÉ‰ΩéÁöÑ max_tokens ÈôêÂà∂
3. ÂàáÊç¢Âà∞Êõ¥Âø´ÁöÑÊ®°ÂûãÂ¶Ç GPT-4o-mini
4. ‰ΩøÁî®ÁÆÄÊ¥ÅÊòéÁ°ÆÁöÑËßÑÂàô

### üí° ‰æõÂ∫îÂïÜÈÄâÊã©Âª∫ËÆÆ

- **‰ª£Á†ÅÂÆ°Êü•Êé®Ëçê**ÔºöOpenAI GPT-4„ÄÅClaude-3.5 Sonnet Êàñ DeepSeek-Coder
- **Â§ßÊñá‰ª∂Â§ÑÁêÜ**ÔºöGoogle GeminiÔºà2M ‰∏ä‰∏ãÊñáÔºâÊàñ ClaudeÔºà200K ‰∏ä‰∏ãÊñáÔºâ
- **ÊàêÊú¨ÊïàÁõä‰ºòÂÖà**ÔºöOpenAI GPT-4o-mini„ÄÅÊúà‰πãÊöóÈù¢ÊàñÊú¨Âú∞Ê®°Âûã
- **‰∏≠ÊñáÂÜÖÂÆπ‰ºòÂåñ**ÔºöÈÄö‰πâÂçÉÈóÆ„ÄÅÊñáÂøÉ‰∏ÄË®Ä„ÄÅÊ∑∑ÂÖÉÊàñË±ÜÂåÖ
- **ÊúÄÊñ∞ÂäüËÉΩ‰ΩìÈ™å**ÔºöGPT-4o„ÄÅClaude-3.5 Sonnet Êàñ Gemini-1.5 Pro
- **ÈöêÁßÅ‰øùÊä§‰ºòÂÖà**ÔºöÈÄöËøá Ollama„ÄÅvLLM Êàñ LM Studio ÈÉ®ÁΩ≤ÁöÑÊú¨Âú∞Ê®°Âûã`
      },
      basic: {
        title: '‚öôÔ∏è Âü∫Á°ÄËÆæÁΩÆÈÖçÁΩÆ',
        content: `## ‚öôÔ∏è Âü∫Á°ÄËÆæÁΩÆÈÖçÁΩÆ

### üåü ÈÖçÁΩÆÈÄâÈ°π

| ËÆæÁΩÆÈ°π | ÂäüËÉΩ | ÈªòËÆ§ÂÄº/ÈÄâÈ°π | Ê≥®ÊÑè‰∫ãÈ°π |
|-------|------|------------|----------|
| **ËØ≠Ë®Ä** | ËÆæÁΩÆÁî®Êà∑ÁïåÈù¢ËØ≠Ë®Ä | English, ‰∏≠Êñá | ÂΩ±ÂìçÁïåÈù¢ËØ≠Ë®ÄÂèäAIËøîÂõûÁªìÊûú |
| **AI‰æõÂ∫îÂïÜ** | ÈÄâÊã©AIÊúçÂä°Êèê‰æõÂïÜ | OpenAI, Claude, DeepSeek, Gemini, ÈÄö‰πâÂçÉÈóÆ, Kimi, ÊñáÂøÉ‰∏ÄË®Ä, Ê∑∑ÂÖÉ, Ë±ÜÂåÖ, Grok, OpenAI Compatible | ÊØè‰∏™‰æõÂ∫îÂïÜÊúâ‰∏çÂêåÁöÑÊ®°Âûã„ÄÅÂÆö‰ª∑ÂíåÂäüËÉΩ |
| **AIÊ®°Âûã** | ÈÄâÊã©ÂÖ∑‰ΩìÊ®°Âûã | Ê†πÊçÆ‰æõÂ∫îÂïÜËá™Âä®Êõ¥Êñ∞ | Êõ¥Â§ßÊ®°Âûã = Êõ¥Â•ΩË¥®Èáè + Êõ¥È´òÊàêÊú¨ |
| **API URL** | Ëá™ÂÆö‰πâAPIÁ´ØÁÇπ | Ê†πÊçÆ‰æõÂ∫îÂïÜËá™Âä®Â°´ÂÖÖ | ‰ªÖOpenAI CompatibleÊó∂ÂøÖÂ°´ |
| **APIÂØÜÈí•** | Ë∫´‰ªΩÈ™åËØÅÂá≠ÊçÆ | Áî®Êà∑Êèê‰æõ | Êú¨Âú∞Âä†ÂØÜÂ≠òÂÇ®ÔºåÁªù‰∏ç‰∏éÊúçÂä°Âô®ÂÖ±‰∫´ |
| **ËæìÂá∫ÈïøÂ∫¶** | AIÂìçÂ∫îtokenÈôêÂà∂ | 4000 tokens (Âª∫ËÆÆ100-8000) | Â§™Â∞è‰ºöÊà™Êñ≠ÔºåÂ§™Â§ß‰ºöË¢´ÊãíÁªù |
| **‰∏ä‰∏ãÊñáÁ™óÂè£** | ÊØèËØ∑Ê±ÇËæìÂÖ•tokenÈôêÂà∂ | 32768 tokens | Ë∂ÖÈôêÊó∂Ëá™Âä®ÂàÜÁâáÔºåÈÄöÂ∏∏Êó†ÈúÄË∞ÉÊï¥ |
| **ËøûÊé•ÊµãËØï** | È™åËØÅAPIÈÖçÁΩÆ | ÊµãËØïÊåâÈíÆ | ‰ΩøÁî®ÂâçÈ™åËØÅËÆæÁΩÆ |

### üìä ÂàÜÊûê‰∏éÂØºÂá∫ËÆæÁΩÆ

| ËÆæÁΩÆÈ°π | ÂäüËÉΩ | ÈÄâÈ°π | ‰ΩøÁî®Âú∫ÊôØ |
|-------|------|------|----------|
| **ËØ¶ÁªÜÁ®ãÂ∫¶** | ÊéßÂà∂ÂàÜÊûêÊ∑±Â∫¶ | ÁÆÄÂçï, ÂùáË°°, ËØ¶ÁªÜ | ÁÆÄÂçï=Âø´ÈÄüÔºõËØ¶ÁªÜ=ÂΩªÂ∫ï+ËæÉÊÖ¢ |
| **ÂØºÂá∫ÊéíÁâà** | Êä•ÂëäÁªÑÁªáÁªìÊûÑ | ÊåâËßÑÂàô, ÊåâÊñá‰ª∂ | ÊåâËßÑÂàô=ËßÑÂàôÂØºÂêëÔºõÊåâÊñá‰ª∂=Êñá‰ª∂ÂØºÂêë |
| **ËøáÊª§ÈÄöËøáÈ°π** | ‰ªÖÊòæÁ§∫ÈóÆÈ¢ò | ÂêØÁî®/Á¶ÅÁî® | ÂêØÁî®=‰ªÖÈóÆÈ¢òÔºõÁ¶ÅÁî®=ÊâÄÊúâÁªìÊûú |
| **ÊäòÂè†ÂäüËÉΩ** | HTMLÊä•ÂëäÂØºËà™ | ÂêØÁî®/Á¶ÅÁî® | ÂêØÁî®ÈÄÇÂêàÂ§öÁ´†ËäÇÁöÑÂ§ßÂûãÊä•Âëä |
| **ÈáçÁΩÆËÆæÁΩÆ** | ÊÅ¢Â§çÈªòËÆ§ÂÄº | ‰∏ÄÈîÆÈáçÁΩÆ | Êó†Ê≥ïÊí§ÈîÄÔºå‰øùÁïôAPIÂØÜÈí• |

### üîß ÈÖçÁΩÆÂª∫ËÆÆ

- **‰ª£Á†ÅÂÆ°Êü•Êé®Ëçê**ÔºöÈÄâÊã©ÁºñÁ®ãËÉΩÂäõÂº∫ÁöÑÊ®°ÂûãÔºàGPT-4, Claude-3.5-Sonnet, DeepSeek-CoderÔºâ
- **Â§ßÊñá‰ª∂Â§ÑÁêÜ**Ôºö‰ΩøÁî®Â§ß‰∏ä‰∏ãÊñáÁ™óÂè£ÁöÑ‰æõÂ∫îÂïÜÔºàGemini 2M, Claude 200K, Kimi 128KÔºâ
- **ÊàêÊú¨ÊïàÁõä‰ºòÂÖà**ÔºöËÄÉËôë GPT-4o-mini, DeepSeek ÊàñÈÄöËøá OpenAI Compatible ÁöÑÊú¨Âú∞Ê®°Âûã
- **‰∏≠ÊñáÂÜÖÂÆπ‰ºòÂåñ**ÔºöÈÄö‰πâÂçÉÈóÆ„ÄÅÊñáÂøÉ‰∏ÄË®Ä„ÄÅÊ∑∑ÂÖÉÊàñË±ÜÂåÖÊèê‰æõÊõ¥Â•ΩÁöÑ‰∏≠ÊñáÁêÜËß£
- **ÈöêÁßÅ‰øùÊä§‰ºòÂÖà**ÔºöÈÄöËøá Ollama ‰ΩøÁî®Êú¨Âú∞Ê®°ÂûãÈÖçÂêà OpenAI Compatible ËÆæÁΩÆ`
      },
      advanced: {
        title: 'üöÄ È´òÁ∫ßÂäüËÉΩÈÖçÁΩÆ',
        content: `## üöÄ È´òÁ∫ßÂäüËÉΩÈÖçÁΩÆ

### ‚ö° Ê†∏ÂøÉÈ´òÁ∫ßÂäüËÉΩ

| ÂäüËÉΩ | ‰ΩúÁî® | ÈÄâÈ°π/ËÆæÁΩÆ | ÈúÄË¶ÅPro | ‰ΩøÁî®Âú∫ÊôØ |
|------|------|----------|---------|----------|
| **ÂÆ°ÈòÖÊ®°Âºè** | ÁªìÊûúÁÆ°ÁêÜ‰∏éËøáÊª§ | Êé•Âèó/ÂæÖÂ§ÑÁêÜ/ÊãíÁªùÁä∂ÊÄÅ | Âê¶ | Âõ¢ÈòüÂÆ°Êü•„ÄÅQAÂ∑•‰ΩúÊµÅ„ÄÅËøõÂ∫¶Ë∑üË∏™ |
| **Âπ∂Ë°å‰ªªÂä°** | Âπ∂ÂèëAPIËØ∑Ê±Ç | 1-10‰∏™‰ªªÂä°ÔºàÂÖçË¥πÁâàÊúÄÂ§ö1‰∏™Ôºâ | ÊòØ(>1) | Â§öÊñá‰ª∂Â§ÑÁêÜ„ÄÅÂä†ÈÄüÂÆ°Êü• |
| **Â§öÊñá‰ª∂ÂàÜÊûê** | Êñá‰ª∂Êï¥‰ΩìÂàÜÊûê | ÂêØÁî®/Á¶ÅÁî® | Âê¶ | Ë∑®Êñá‰ª∂‰æùËµñ„ÄÅÊû∂ÊûÑÈ™åËØÅ |
| **AI‰øÆÂ§çÂª∫ËÆÆ** | Êä•Âëä‰∏≠ÁîüÊàê‰øÆÂ§çÊåâÈíÆ | ÂêØÁî®/Á¶ÅÁî® + Â≠êÈÄâÈ°π | ÊòØ | Âø´ÈÄü‰øÆÂ§ç„ÄÅAIÂ≠¶‰π†Âª∫ËÆÆ |

### üîß ËØ¶ÁªÜÈÖçÁΩÆ

| ËÆæÁΩÆÈ°π | ÊèèËø∞ | Âª∫ËÆÆÂÄº | ÈáçË¶ÅÊèêÈÜí |
|-------|------|--------|----------|
| **Âπ∂Ë°å‰ªªÂä°Êï∞** | ÂêåÊó∂ËøõË°åÁöÑAPIË∞ÉÁî®Êï∞Èáè | Â§ßÂ§öÊï∞Áî®Êà∑3-8‰∏™ | È´òÂÄºÂèØËÉΩËß¶ÂèëÈÄüÁéáÈôêÂà∂ |
| **ÂåÖÂê´Êñá‰ª∂ÂÜÖÂÆπ** | AI‰øÆÂ§çÁöÑÂÆåÊï¥‰∏ä‰∏ãÊñá | ÂêØÁî®‰ª•ÊèêÈ´òÂáÜÁ°ÆÊÄß | ÊòæËëóÂ¢ûÂä†token‰ΩøÁî®Èáè |
| **Ë¶ÅÊ±ÇËØ¶ÁªÜËÆ°Âàí** | AIÂÖàËß£ÈáäÂÜçÂª∫ËÆÆ | ÂêØÁî®‰ª•ÊèêÈ´òÂÆâÂÖ®ÊÄß | Èôç‰Ωé‰∏çÂΩìÊõ¥ÊîπÁöÑÈ£éÈô© |
| **‰∏ä‰∏ãÊñáÁ™óÂè£ÁõëÊéß** | Ë∑üË∏™ÂêàÂπ∂Êñá‰ª∂Â§ßÂ∞è | Ëá™Âä®ËÆ°ÁÆó | Ë∂ÖÈôê‰ºöÈôç‰ΩéÊïàÊûú |

### üéØ ÂäüËÉΩ‰ºòÂäø‰∏éÈôêÂà∂

| ÂäüËÉΩ | ‰ºòÂäø | ÈôêÂà∂ | ÊúÄ‰Ω≥ÂÆûË∑µ |
|------|------|------|----------|
| **ÂÆ°ÈòÖÊ®°Âºè** | Á≥ªÁªüÂåñË∑üË∏™„ÄÅÂõ¢ÈòüÂçè‰Ωú | ‰ªÖÊú¨Âú∞Â≠òÂÇ® | Áî®‰∫éÁªìÊûÑÂåñÂÆ°Êü•ÊµÅÁ®ã |
| **Âπ∂Ë°å‰ªªÂä°** | 3-5ÂÄçÂ§ÑÁêÜÂä†ÈÄü„ÄÅÊõ¥Â•ΩËµÑÊ∫êÂà©Áî® | ÈÄüÁéáÈôêÂà∂„ÄÅÊàêÊú¨Â¢ûÂä† | ‰ªé3-5ÂºÄÂßãÔºåÊ†πÊçÆ‰æõÂ∫îÂïÜË∞ÉÊï¥ |
| **Â§öÊñá‰ª∂ÂàÜÊûê** | Ë∑®Êñá‰ª∂‰∏ÄËá¥ÊÄß„ÄÅÊû∂ÊûÑÊ¥ûÂØü | ‰∏ä‰∏ãÊñáÁ™óÂè£ÈôêÂà∂„ÄÅÂ§ÑÁêÜËæÉÊÖ¢ | ‰ªÖÂàÜÁªÑÁõ∏ÂÖ≥Êñá‰ª∂ÔºàÁªÑ‰ª∂+ÊµãËØï+Á±ªÂûãÔºâ |
| **AI‰øÆÂ§ç** | Âø´ÈÄü‰øÆÂ§ç„ÄÅÂ≠¶‰π†Â∑•ÂÖ∑ | ‰ªÖHTMLÊä•Âëä„ÄÅÂçïÁã¨APIË∞ÉÁî® | ÊúâÈÄâÊã©Âú∞Áî®‰∫éÂ§çÊùÇÈóÆÈ¢ò |

### üí° ‰ºòÂåñÂª∫ËÆÆ

**ÊÄßËÉΩ‰ºòÂåñ**Ôºö

- ‰ªé3‰∏™Âπ∂Ë°å‰ªªÂä°ÂºÄÂßãÔºåÈÄêÊ≠•Â¢ûÂä†
- ÁõëÊéß‰æõÂ∫îÂïÜÈÄüÁéáÈôêÂà∂Âπ∂Áõ∏Â∫îË∞ÉÊï¥
- ‰ªÖÂØπÁõ∏ÂÖ≥ÁªÑ‰ª∂‰ΩøÁî®Â§öÊñá‰ª∂ÂàÜÊûê

**ÊàêÊú¨ÁÆ°ÁêÜ**Ôºö

- Êõ¥È´òÂπ∂Ë°å‰ªªÂä°Êï∞ = Êõ¥Âø´ÂÆåÊàê‰ΩÜÁü≠ÊúüÊàêÊú¨Êõ¥È´ò
- Ê†πÊçÆÈ°πÁõÆÈúÄÊ±ÇÂπ≥Ë°°ÈÄüÂ∫¶‰∏éÊàêÊú¨

**Ë¥®Èáè‰øùËØÅ**Ôºö

- ‰∏∫AIÂª∫ËÆÆÂêØÁî®"Ë¶ÅÊ±ÇËØ¶ÁªÜËÆ°Âàí"
- ‰ΩøÁî®ÂÆ°ÈòÖÊ®°ÂºèËøõË°åÁ≥ªÁªüÂåñ‰ª£Á†ÅÂÆ°Êü•ÊµÅÁ®ã
- ÂÖàÁî®Â∞èÊñá‰ª∂ÊµãËØïÈ´òÁ∫ßËÆæÁΩÆ`
      },
      privacy: {
        title: 'üîí ÈöêÁßÅ‰∏éÂÆâÂÖ®',
        content: `## üîí ÈöêÁßÅ‰∏éÂÆâÂÖ®

### Êï∞ÊçÆÈöêÁßÅ

- ÊâÄÊúâÂ§ÑÁêÜÈÉΩÂú®Êú¨Âú∞ÊàñÈÄöËøáÊÇ®ÈÄâÊã©ÁöÑ AI ‰æõÂ∫îÂïÜËøõË°å
- Êàë‰ª¨ÁöÑÊúçÂä°Âô®‰∏çÂ≠òÂÇ®‰ªª‰ΩïÊï∞ÊçÆ
- API ÂØÜÈí•Âú®Êú¨Âú∞Âä†ÂØÜ

### ÂÆâÂÖ®ÂäüËÉΩ

- ÂÆâÂÖ®ÁöÑ API ÂØÜÈí•Â≠òÂÇ®
- Êú¨Âú∞Â§ÑÁêÜÈÄâÈ°π
- ‰∏çÂêëÁ¨¨‰∏âÊñπ‰º†ËæìÊï∞ÊçÆ`
      },
      subscription: {
        title: 'üíé ËÆ¢ÈòÖÊîøÁ≠ñ',
        content: `## üíé ËÆ¢ÈòÖÊîøÁ≠ñ

### üéÅ Êñ∞Áî®Êà∑‰ΩìÈ™å

**7Â§©È´òÁ∫ßÂäüËÉΩ‰ΩìÈ™å**ÔºöÊâÄÊúâÊñ∞Áî®Êà∑Ëá™Âä®Ëé∑Âæó7Â§©ÂÆåÊï¥ProÂäüËÉΩËÆøÈóÆ

- Êó†ÈúÄ‰ø°Áî®Âç°Âç≥ÂèØÂºÄÂßã
- ÂÆåÊï¥ËÆøÈóÆÊâÄÊúâProÂäüËÉΩ
- Â¶Ç‰∏çÂçáÁ∫ßÂèØÊó†ÁºùËΩ¨‰∏∫ÂÖçË¥πÁâà

### üí∞ Âπ¥Ë¥π‰ºöÂëò‰ºòÊÉ†

**‰ªò10‰∏™Êúà‰∫´12‰∏™Êúà**Ôºö Âπ¥Ë¥π‰ºöÂëòÁõ∏ÊØîÊúà‰ªòËäÇÁúÅ2‰∏™ÊúàË¥πÁî®

### üìä ÂäüËÉΩÂØπÊØî

| ÂäüËÉΩ | ÂÖçË¥πÁâà | ProÁâà |
|------|--------|-------|
| Êñá‰ª∂ÂàÜÊûê | ‚úÖ Â§ö‰∏™Êñá‰ª∂ | ‚úÖ Â§ö‰∏™Êñá‰ª∂ |
| ÊâÄÊúâAI‰æõÂ∫îÂïÜ | ‚úÖ ÂÖ®ÈÉ®ÊîØÊåÅ | ‚úÖ ÂÖ®ÈÉ®ÊîØÊåÅ |
| È¢ÑÂÆö‰πâËßÑÂàô | ‚úÖ ÊâÄÊúâËßÑÂàôÈõÜ | ‚úÖ ÊâÄÊúâËßÑÂàôÈõÜ |
| Â§öÊñá‰ª∂ÂàÜÊûê | ‚úÖ ÊîØÊåÅ | ‚úÖ ÊîØÊåÅ |
| Âü∫Á°ÄÂØºÂá∫ | ‚úÖ HTML | ‚úÖ HTML |
| ÂÆ°ÈòÖÊ®°Âºè | ‚ùå‰∏çÊîØÊåÅ | ‚úÖ Êé•Âèó/ÂæÖÂÆö/ÊãíÁªù |
| Ëá™ÂÆö‰πâËßÑÂàô | ‚ùå ‰∏çÂèØÁî® | ‚úÖ ÂàõÂª∫&ÂØºÂÖ• |
| Âπ∂Ë°å‰ªªÂä° | ‚ùå ‰ªÖ1‰∏™‰ªªÂä° | ‚úÖ ÊúÄÂ§ö10‰∏™‰ªªÂä° |
| AI‰øÆÂ§çÂª∫ËÆÆ | ‚ùå ‰∏çÂèØÁî® | ‚úÖ ÂØºÂá∫Êä•Âëä‰∏≠ÂèØÁî® |
| È´òÁ∫ßÂØºÂá∫ | ‚ùå ‰ªÖÂü∫Á°ÄÊ†ºÂºè | ‚úÖ Â¢ûÂº∫HTMLÂê´AI‰øÆÂ§ç |

### üè∑Ô∏è ÂÆö‰ª∑

- **Âπ¥Â∫¶Â•óÈ§ê**Ôºö$59.9/Âπ¥ÔºàÁõ∏ÂΩì‰∫éÁ∫¶$5/ÊúàÔºâ
- **ÊúàÂ∫¶Â•óÈ§ê**Ôºö$5.9/Êúà

### üîÑ ËÆ¢ÈòÖÁÆ°ÁêÜ

- ÈöèÊó∂ÂèñÊ∂àÔºåÊúçÂä°‰ΩøÁî®Ëá≥ÂΩìÊúüÁªìÊùü
- Ëá™Âä®Áª≠Ë¥πÔºàÂèØÂÖ≥Èó≠Ôºâ`
      },
      support: {
        title: 'üìû ÊîØÊåÅ‰∏éÂèçÈ¶à',
        content: `## üìû ÊîØÊåÅ‰∏éÂèçÈ¶à

### Ëé∑ÂèñÂ∏ÆÂä©

- ÈÇÆÁÆ±Ôºösupport@deepreview.cloud

### ÂèçÈ¶à

Êàë‰ª¨ÈáçËßÜÊÇ®ÁöÑÂèçÈ¶àÔºÅÈÄöËøáÂàÜ‰∫´ÊÇ®ÁöÑ‰ΩìÈ™åÂíåÂª∫ËÆÆÊù•Â∏ÆÂä©Êàë‰ª¨ÊîπËøõ DeepReview„ÄÇ`
      }
    };
  }

  bindEvents() {
    // Load theme preference
    this.loadThemePreference();
    
    // Navigation clicks
    document.addEventListener('click', (e) => {
      if (e.target.closest('.nav-section-title')) {
        const section = e.target.closest('.nav-section-title').dataset.section;
        if (section) {
          this.showSection(section);
        }
      }
    });
    
    // Language toggle
    document.getElementById('langToggle').addEventListener('click', () => {
      this.switchLanguage();
    });
    
    // Theme toggle
    document.getElementById('themeToggle').addEventListener('click', () => {
      this.toggleTheme();
    });
    
    // Print
    document.getElementById('printBtn').addEventListener('click', () => {
      window.print();
    });
    
    // Share
    document.getElementById('shareBtn').addEventListener('click', () => {
      if (navigator.share) {
        navigator.share({
          title: 'DeepReview User Guide',
          url: window.location.href
        });
      } else {
        navigator.clipboard.writeText(window.location.href).then(() => {
          alert('Link copied to clipboard!');
        });
      }
    });
    
    // Mobile menu (if needed)
    this.setupMobileMenu();
    
    // Image click to enlarge
    this.setupImageEnlarge();
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case 'p':
            e.preventDefault();
            window.print();
            break;
        }
      }
    });
  }

  setupMobileMenu() {
    // Add mobile menu toggle if on mobile
    if (window.innerWidth <= 768) {
      const mobileToggle = document.createElement('button');
      mobileToggle.className = 'mobile-menu-toggle';
      mobileToggle.innerHTML = '‚ò∞';
      mobileToggle.onclick = () => {
        document.querySelector('.guide-sidebar').classList.toggle('open');
      };
      document.body.appendChild(mobileToggle);
    }
    
    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      const sidebar = document.querySelector('.guide-sidebar');
      const toggle = document.querySelector('.mobile-menu-toggle');
      
      if (!sidebar.contains(e.target) && e.target !== toggle) {
        sidebar.classList.remove('open');
      }
    });
  }

  setupImageEnlarge() {
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('step-image')) {
        this.enlargeImage(e.target);
      }
    });
  }

  enlargeImage(img) {
    // Create modal overlay
    const modal = document.createElement('div');
    modal.className = 'image-modal';
    modal.innerHTML = `
      <div class="image-modal-content">
        <img src="${img.src}" alt="${img.alt}" class="enlarged-image" />
        <button class="close-modal" title="ÂÖ≥Èó≠">&times;</button>
      </div>
    `;
    
    // Add to body
    document.body.appendChild(modal);
    
    // Close handlers
    modal.addEventListener('click', (e) => {
      if (e.target === modal || e.target.classList.contains('close-modal')) {
        document.body.removeChild(modal);
      }
    });
    
    // Keyboard close
    const handleKeydown = (e) => {
      if (e.key === 'Escape') {
        document.body.removeChild(modal);
        document.removeEventListener('keydown', handleKeydown);
      }
    };
    document.addEventListener('keydown', handleKeydown);
  }
}

// Initialize the app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new UserGuideApp();
});

// Add additional styles
const style = document.createElement('style');
style.textContent = `
  .error-state {
    text-align: center;
    padding: 60px 20px;
  }
  
  .error-state h2 {
    color: var(--warn);
    margin-bottom: 16px;
  }
  
  /* Fix for ordered lists in guide content */
  #guideArticle ol {
    counter-reset: list-counter;
    padding-left: 0;
  }
  
  #guideArticle ol > li {
    counter-increment: list-counter;
    list-style: none;
    padding-left: 2em;
    position: relative;
    margin-bottom: 1em;
  }
  
  #guideArticle ol > li::before {
    content: counter(list-counter) ".";
    position: absolute;
    left: 0;
    font-weight: bold;
    color: var(--primary, #007acc);
  }
  
  /* Nested lists styling */
  #guideArticle ol ol {
    margin-top: 0.5em;
    margin-bottom: 0.5em;
  }
  
  /* Problem and Solution sections spacing */
  #guideArticle h4 + p strong {
    display: block;
    margin-bottom: 0.5em;
  }
`;
document.head.appendChild(style);
